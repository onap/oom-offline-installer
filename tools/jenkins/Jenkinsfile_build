pipeline {
    agent {
        label 'centos_build_server'
    }
    stages{
        stage('git clone offline installer and oom'){
            steps{
                sh """
                #Cleanup
                rm -rf oom
                rm -rf offline-installer
                
                #clone both repositories
                git clone -b \$HELM_CHARTS_BRANCH --recurse-submodules \$HELM_CHARTS_REPO oom
                git clone -b master https://git.onap.org/oom/offline-installer offline-installer
                """
            }
        }
        stage('extract_docker_images'){
            when {
                expression {(params.EXTRACT_DOCKER_IMAGES)}
            }
            steps{
                sh '''
                ONAP_DIR=oom/kubernetes/onap

                # Clone specific refspec for OOM
                pushd oom
                if [[ ! -z "$HELM_CHARTS_GERRIT_REFSPEC" ]]; then
                    git fetch $HELM_CHARTS_REPO $HELM_CHARTS_GERRIT_REFSPEC && git checkout FETCH_HEAD
                fi
                popd

                # Enable all in onap/values.yaml from AAF to the end of file
                sed -i "\$(grep -n "Enable/disable and configure" $ONAP_DIR/values.yaml | cut -f1 -d:),\$ s/false/true/g" $ONAP_DIR/values.yaml

                # Generate image list
                ./offline-installer/build/creating_data/docker-images-collector.sh $ONAP_DIR $OOM_DATALIST_FILE
                '''
            }
        }
        stage('download_artifacts'){
            when{
                expression {(params.DOWNLOAD_ARTIFACTS)}
            }
            steps{
                sh '''
                    # Remove simulated registry, for sure
                    sed -i '3,\$d' /etc/hosts

                    # Remove docker settings for sure
                    rm -rf ~/.docker

                    python3 -m venv ./venv --clear
                    source ./venv/bin/activate
                    pip install -r ./offline-installer/build/download/requirements.txt
                    ./offline-installer/build/download/download.py \
                    --docker ${RESOURCES_LIST_DIRECTORY}/rke_docker_images.list \
                    --docker ${OOM_DATALIST_FILE} \
                    --docker ${RESOURCES_LIST_DIRECTORY}/k8s_docker_images.list \
                    --http ${RESOURCES_LIST_DIRECTORY}/infra_bin_utils.list ${LOCAL_RESOURCES_FOLDER}/downloads

                    ./offline-installer/build/download/download.py \
                    --docker ${RESOURCES_LIST_DIRECTORY}/infra_docker_images.list ${LOCAL_RESOURCES_FOLDER}/offline_data/docker_images_infra/
                    deactivate

                    # Downloading rpm using below create_repo script
                    resources_folder="\$(dirname $LOCAL_RESOURCES_FOLDER)"
                    echo \${resources_folder}
                    ./offline-installer/build/create_repo.sh -d \${resources_folder}
                    '''
            }
        }
        stage('nexus_blob_build'){
            when{
                expression {(params.BUILD_NEXUS_BLOB)}
            }
            steps{
                sh '''# Delete OUTPUT_DIRECTORY if exists to prevent backup and save space
                rm -rf ${OUTPUT_DIRECTORY}

                # Remove docker settings for sure
                rm -rf ~/.docker

                # Replace docker image list by the generated one
                #if [ "${SKIP_EXTRACT_OOM}" == "False" ]; then
                    sed -i 's|NXS_DOCKER_IMG_LIST=.*|NXS_DOCKER_IMG_LIST=\"'"${OOM_DATALIST_FILE}"'\"|' ./offline-installer/build/build_nexus_blob.sh
                #fi

                # Add RKE images to the generated list if required
                if [ "$ADD_RKE" == "true" ]; then
                    cat ./offline-installer/build/data_lists/rke_docker_images.list >> ${OOM_DATALIST_FILE}
                fi

                # Build the blob
                ./offline-installer/build/build_nexus_blob.sh --input-directory ${LOCAL_RESOURCES_FOLDER} --output-directory ${OUTPUT_DIRECTORY} --resource-list-directory ${RESOURCES_LIST_DIRECTORY}
                '''
            }
        }
        stage('prepare_package'){
            when{
                expression {(params.PREPARE_PACKAGE)} 
            }
            steps{
                sh '''rm -rf /build_workspace/common/package/*
                if [[ "${SKIP_SW}" = "true" ]]; then FLAGS+=" --skip-sw" ; fi
                if [[ "${SKIP_RESOURCES}" = "true" ]]; then FLAGS+=" --skip-resources" ; fi
                if [[ "${SKIP_AUX}" = "true" ]]; then FLAGS+=" --skip-aux" ; fi
                if [[ "${OVERWRITE}" = "true" ]]; then FLAGS+=" --overwrite" ; fi
                if [ ! -z ${APPLICATION_PATCH_FILE} ] && [ -z ${ONAP_ME_GERRIT_REFSPEC} ]; then FLAGS+=" --application-patch_file ${APPLICATION_PATCH_FILE}"; fi
                if [[ ! -z ${APPLICATION_PATCH_ROLE} ]]; then FLAGS+=" --application-patch-role ${APPLICATION_PATCH_ROLE}"; fi
                if [[ ! -z ${APPLICATION_CONFIGURATION_FILE} ]]; then FLAGS+=" --application-configuration ${APPLICATION_CONFIGURATION_FILE}"; fi
                if [[ ! -z ${AUX_DIRECTORY} ]]; then FLAGS+=" --aux-directory ${AUX_DIRECTORY}"; fi
                if [[ ! -z ${LOCAL_RESOURCES_FOLDER} ]]; then FLAGS+=" --resources-directory ${LOCAL_RESOURCES_FOLDER}"; fi


                python3 ./offline-installer/build/package.py ${HELM_CHARTS_REPO} \
                                         --build-version '' \
                                         --application-repository_reference ${HELM_CHARTS_GERRIT_REFSPEC} \
                                         --output-dir ${PACKAGE_DIRECTORY} \
                                         \${FLAGS[*]}
                                         
                #extra line at the end of the script
                '''
            }
        }
    }
}