{
  "comments": [
    {
      "key": {
        "uuid": "8e45bd0d_eb8580ec",
        "filename": "ansible/docker/run_chroot.sh",
        "patchSetId": 4
      },
      "lineNbr": 114,
      "author": {
        "id": 4886
      },
      "writtenOn": "2019-03-26T12:14:15Z",
      "side": 1,
      "message": "these temp directories are never cleaned up - and .overlay is leaving files behind - this looks like error to me - how the following overlay mounts deal with non-empty working dir?",
      "revId": "b9d976ba7f40ca0d7e19aa590f3c9bb44dae2ced",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "36f30c3a_e924d55e",
        "filename": "ansible/docker/run_chroot.sh",
        "patchSetId": 4
      },
      "lineNbr": 114,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-03-26T12:40:40Z",
      "side": 1,
      "message": "seems to work. Even if it didn\u0027t, you can probably turn workdir into tmpfs mount too, so we would not care about overlay leaving anything there.",
      "parentUuid": "8e45bd0d_eb8580ec",
      "revId": "b9d976ba7f40ca0d7e19aa590f3c9bb44dae2ced",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "297f56fd_49935ecf",
        "filename": "ansible/docker/run_chroot.sh",
        "patchSetId": 4
      },
      "lineNbr": 219,
      "author": {
        "id": 4886
      },
      "writtenOn": "2019-03-25T09:28:32Z",
      "side": 1,
      "message": "when you rerun this script with this guard then you dont get inside this block to setup the CHROOT_ variables, right? Does this work? Or do the exports populate the env of unshare?",
      "revId": "b9d976ba7f40ca0d7e19aa590f3c9bb44dae2ced",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3a5933a6_9be2e082",
        "filename": "ansible/docker/run_chroot.sh",
        "patchSetId": 4
      },
      "lineNbr": 219,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-03-25T10:33:02Z",
      "side": 1,
      "message": "Well, yes, exports populate the environment and unshare command is not like sudo, it does not clear it, so the variables are passed through.",
      "parentUuid": "297f56fd_49935ecf",
      "revId": "b9d976ba7f40ca0d7e19aa590f3c9bb44dae2ced",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7e90ef9f_919a110a",
        "filename": "ansible/docker/run_chroot.sh",
        "patchSetId": 4
      },
      "lineNbr": 342,
      "author": {
        "id": 4886
      },
      "writtenOn": "2019-03-26T12:14:15Z",
      "side": 1,
      "message": "why did you removed mode from this? I know we are running everything as root inside but that can change, I see no hurt in it to stay as before",
      "revId": "b9d976ba7f40ca0d7e19aa590f3c9bb44dae2ced",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2b4b575a_dc502dd6",
        "filename": "ansible/docker/run_chroot.sh",
        "patchSetId": 4
      },
      "lineNbr": 342,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-03-26T12:40:40Z",
      "side": 1,
      "message": "my main reasoning was probably all this magic required to fetch the tty gid. There is however another reason: pty\u0027s are managed by the *kernel*. the user opening /dev/ptmx gets the pty master, and a slave is created in /dev/pts, and this slave is owned by the user that just opened ptmx. it is in particular not owned by root. And I do not see any reason as to why we would need to have any normal user in the tty group, especially if he can access his own terminals.",
      "parentUuid": "7e90ef9f_919a110a",
      "revId": "b9d976ba7f40ca0d7e19aa590f3c9bb44dae2ced",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "77c0aaae_ff11ecff",
        "filename": "ansible/docker/run_chroot.sh",
        "patchSetId": 4
      },
      "lineNbr": 342,
      "author": {
        "id": 4886
      },
      "writtenOn": "2019-03-26T13:55:52Z",
      "side": 1,
      "message": "true, I did not notice that default mode is 600",
      "parentUuid": "2b4b575a_dc502dd6",
      "revId": "b9d976ba7f40ca0d7e19aa590f3c9bb44dae2ced",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a5ccb410_01de3ab8",
        "filename": "ansible/docker/run_chroot.sh",
        "patchSetId": 4
      },
      "lineNbr": 357,
      "author": {
        "id": 4886
      },
      "writtenOn": "2019-03-26T12:14:15Z",
      "side": 1,
      "message": "this fails when workdir inside the chroot does not exist - previous version ensured creation of such path\n\nAlso this line seems overly cryptic - IMHO fakeshell.sh made it more readable",
      "revId": "b9d976ba7f40ca0d7e19aa590f3c9bb44dae2ced",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "aee0da91_2ccdbba5",
        "filename": "ansible/docker/run_chroot.sh",
        "patchSetId": 4
      },
      "lineNbr": 357,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-03-26T12:40:40Z",
      "side": 1,
      "message": "and more complicated. this is the other side, uploading your own shell script to do such things seems to me like an overkill, especially if the number of commands executed in that env has dramatically decreased. However i may make it more readable.",
      "parentUuid": "a5ccb410_01de3ab8",
      "revId": "b9d976ba7f40ca0d7e19aa590f3c9bb44dae2ced",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    }
  ]
}